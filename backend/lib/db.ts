import mongoose from 'mongoose';
import * as auth from '#lib/auth.ts';
import { strict } from 'assert';
import { required } from 'zod/v4-mini';

await mongoose.connect(process.env.MONGODB_URL!);

export interface User
{
  _id?: string, // uuid generated by mongodb automatically
  rollno?: string, // this will be empty for faculty and admins
  email: string,
  pass_hash: string, // hashed password
  name: string,
  type: string // student, faculty, admin
}

export interface course
{
  _id?: string,
  name: string,
  code: string,
  facultyid : string,
  description?: string,
  link?: string,
  resources?: string[],
  attendence: string,

}
const UserSchema = new mongoose.Schema<User>({
  email:     { type: String, required: true, unique: true, lowercase: true },
  pass_hash: { type: String, required: true },
  name:      { type: String, required: true },
  rollno:    { type: String, required: false, unique: true, uppercase: true },
  type:      { type: String, required: true, enum: ['student','faculty','admin'] },
});
const UserModel = mongoose.model('users', UserSchema);


const courseSchema = new mongoose.Schema<course>({
  name: { type: String, required:true},
  code: { type: String, required:true, unique:true},
  facultyid: { type: String, required:true, ref: 'users'},
  description: { type: String, required:false},
  link: {type: String, required:false},
  resources: {type: [String],required:false},
  attendence:{type:String,required:true,ennum:['present','absent']},
});
const CourseModel =mongoose.model('courses', courseSchema);


/////////////////////////////////////////////////////////////////////////////

export async function add_user(user: User): Promise<string>
{
  const newdoc = await UserModel.create(user);
  return newdoc._id;
}

/////////////////////////////////////////////////////////////////////////////

export async function update_email(userid: string, email: string)
{
  await UserModel.findOneAndUpdate({userid}, {email}, {runValidators: true}).exec();
}

export async function update_pass_hash(userid: string, pass_hash: string)
{
  await UserModel.findOneAndUpdate({userid}, {pass: pass_hash}, {runValidators: true}).exec();
}

/////////////////////////////////////////////////////////////////////////////

export function get_user_from_uid(uid: string): Promise<User|null>
{
  return UserModel.findOne({_id: uid}).lean<User>().exec();
}

export function get_user_from_email(email: string): Promise<User|null>
{
  return UserModel.findOne({email}).lean<User>().exec();
}

export function get_user_from_rollno(rollno: string): Promise<User|null>
{
  return UserModel.findOne({rollno}).lean<User>().exec();
}

/////////////////////////////////////////////////////////////////////////////

export async function get_user_from_token(token: string): Promise<User|null>
{
  if (token)
  {
    const data = auth.jwt_decode(token);
    if (data)
    {
      const user = await get_user_from_uid(data.uid);
      if (user)
      {
        return user;
      }
    }
  }
  
  return null;
}
//////////////////////////////////////////////////////////////////////////////
export async function add_course(course: course, user: User): Promise<string>
{
  if (user.type !== 'admin')
  {
    throw new Error('Only admin can add courses');
  }
  const newdoc = await CourseModel.create(course);
  return newdoc._id;
}
////////////////////////////////////////////////////////////////////////////////
export async function get_course_from_id(courseid: string): Promise<course|null>
{
  return CourseModel.findOne({_id: courseid}).lean<course>().exec();
}
export async function get_course_from_name(name: string): Promise<course|null>
{
  return CourseModel.findOne({name}).lean<course>().exec();
}
export async function get_course_from_code(code: string): Promise<course|null>
{
  return CourseModel.findOne({code}).lean<course>().exec();
}
///////////////////////////////////////////////////////////////////////////////
export async function update_course(courseid: string, course: course): Promise<void>
{
  await CourseModel.findOneAndUpdate({id: courseid},course, {runValidators: true}).exec();
}
//////////////////////////////////////////////////////////////////////////////////////
