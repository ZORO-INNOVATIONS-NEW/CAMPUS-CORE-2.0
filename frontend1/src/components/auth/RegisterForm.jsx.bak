import { useState } from 'react';
import { BsMicrosoft } from 'react-icons/bs';
// import { FaApple } from 'react-icons/fa';
import { FcGoogle } from 'react-icons/fc';
import { HiEye, HiEyeOff, HiOutlineMail, HiOutlineUser } from 'react-icons/hi';
import { RiLockPasswordLine } from 'react-icons/ri';

const RegisterForm = ({ userType }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    showPassword: false,
    showConfirmPassword: false
  });

  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: '' }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate form
    const newErrors = {};
    if (!formData.firstName) newErrors.firstName = 'First name is required';
    if (!formData.lastName) newErrors.lastName = 'Last name is required';
    if (!formData.email) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Invalid email format';
    }
    if (!formData.password) {
      newErrors.password = 'Password is required';
    } else if (formData.password.length < 8) {
      newErrors.password = 'Password must be at least 8 characters';
    }
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Please confirm your password';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    try {
      setIsLoading(true);
      // Handle form submission
      console.log('Form submitted:', formData);
      // Add your registration logic here
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulated API call
    } catch (error) {
      console.error('Registration error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label htmlFor="firstName" className="block text-sm text-gray-600 mb-1">
            First Name
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <HiOutlineUser className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              name="firstName"
              id="firstName"
              value={formData.firstName}
              onChange={handleChange}
              className={`w-full pl-10 pr-3 py-2.5 border rounded-xl ${
                errors.firstName ? 'border-red-500' : 'border-gray-300'
              } focus:outline-none focus:border-[#3666F6] focus:ring-1 focus:ring-[#3666F6]/20`}
              placeholder="First Name"
            />
          </div>
          {errors.firstName && (
            <p className="mt-1 text-sm text-red-500 animate-fadeIn">{errors.firstName}</p>
          )}
        </div>

        <div>
          <label htmlFor="lastName" className="block text-sm text-gray-600 mb-1">
            Last Name
          </label>
          <div className="relative">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <HiOutlineUser className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              name="lastName"
              id="lastName"
              value={formData.lastName}
              onChange={handleChange}
              className={`w-full pl-10 pr-3 py-2.5 border rounded-xl ${
                errors.lastName ? 'border-red-500' : 'border-gray-300'
              } focus:outline-none focus:border-[#3666F6] focus:ring-1 focus:ring-[#3666F6]/20`}
              placeholder="Last Name"
            />
          </div>
          {errors.lastName && (
            <p className="mt-1 text-sm text-red-500 animate-fadeIn">{errors.lastName}</p>
          )}
        </div>
      </div>

      <div>
        <label htmlFor="email" className="block text-sm text-gray-600 mb-1">
          Email Address
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <HiOutlineMail className="h-5 w-5 text-gray-400" />
          </div>
          <input
            type="email"
            name="email"
            id="email"
            value={formData.email}
            onChange={handleChange}
            className={`w-full pl-10 pr-3 py-2.5 border rounded-xl ${
              errors.email ? 'border-red-500' : 'border-gray-300'
            } focus:outline-none focus:border-[#3666F6] focus:ring-1 focus:ring-[#3666F6]/20`}
            placeholder="Enter your email address"
          />
        </div>
        {errors.email && (
          <p className="mt-1 text-sm text-red-500 animate-fadeIn">{errors.email}</p>
        )}
      </div>

      <div>
        <label htmlFor="password" className="block text-sm text-gray-600 mb-1">
          Password
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <RiLockPasswordLine className="h-5 w-5 text-gray-400" />
          </div>
          <input
            type={formData.showPassword ? 'text' : 'password'}
            name="password"
            id="password"
            value={formData.password}
            onChange={handleChange}
            className={`w-full pl-10 pr-10 py-2.5 border rounded-xl ${
              errors.password ? 'border-red-500' : 'border-gray-300'
            } focus:outline-none focus:border-[#3666F6] focus:ring-1 focus:ring-[#3666F6]/20`}
            placeholder="Create a password"
          />
          <button
            type="button"
            onClick={() => setFormData(prev => ({ ...prev, showPassword: !prev.showPassword }))}
            className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
          >
            {formData.showPassword ? (
              <HiEyeOff className="h-5 w-5" />
            ) : (
              <HiEye className="h-5 w-5" />
            )}
          </button>
        </div>
        {errors.password && (
          <p className="mt-1 text-sm text-red-500 animate-fadeIn">{errors.password}</p>
        )}
      </div>

      <div>
        <label htmlFor="confirmPassword" className="block text-sm text-gray-600 mb-1">
          Confirm Password
        </label>
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <RiLockPasswordLine className="h-5 w-5 text-gray-400" />
          </div>
          <input
            type={formData.showConfirmPassword ? 'text' : 'password'}
            name="confirmPassword"
            id="confirmPassword"
            value={formData.confirmPassword}
            onChange={handleChange}
            className={`w-full pl-10 pr-10 py-2.5 border rounded-xl ${
              errors.confirmPassword ? 'border-red-500' : 'border-gray-300'
            } focus:outline-none focus:border-[#3666F6] focus:ring-1 focus:ring-[#3666F6]/20`}
            placeholder="Confirm your password"
          />
          <button
            type="button"
            onClick={() => setFormData(prev => ({ ...prev, showConfirmPassword: !prev.showConfirmPassword }))}
            className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
          >
            {formData.showConfirmPassword ? (
              <HiEyeOff className="h-5 w-5" />
            ) : (
              <HiEye className="h-5 w-5" />
            )}
          </button>
        </div>
        {errors.confirmPassword && (
          <p className="mt-1 text-sm text-red-500 animate-fadeIn">{errors.confirmPassword}</p>
        )}
      </div>

      <button
        type="submit"
        disabled={isLoading}
        className={`w-full bg-[#3666F6] text-white py-2 rounded transition-all duration-200 
          ${isLoading ? 'opacity-70 cursor-not-allowed' : 'hover:bg-blue-700'}`}
      >
        {isLoading ? (
          <span className="flex items-center justify-center">
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Creating Account...
          </span>
        ) : (
          'Create Account'
        )}
      </button>

      <div className="mt-6">
        <p className="text-center text-sm text-gray-500 mb-4">or continue with</p>
        <div className="flex justify-center space-x-4">
          <button
            type="button"
            className="p-2.5 border border-gray-200 rounded hover:bg-gray-50 transition-colors flex items-center justify-center"
          >
            <FcGoogle className="w-5 h-5" />
          </button>
          <button
            type="button"
            className="p-2.5 border border-gray-200 rounded hover:bg-gray-50 transition-colors flex items-center justify-center"
          >
            <BsMicrosoft className="w-5 h-5 text-[#00A4EF]" />
          </button>
          {/* <button
            type="button"
            className="p-2.5 border border-gray-200 rounded hover:bg-gray-50 transition-colors flex items-center justify-center"
          >
            <FaApple className="w-5 h-5 text-gray-900" />
          </button> */}
        </div>
      </div>
    </form>
  );
};

export default RegisterForm;
